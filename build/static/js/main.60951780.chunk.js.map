{"version":3,"sources":["constants/ChatConstants.js","actions/ChatThreadActionCreator.js","components/ThreadListItem.react.js","utils/ChatMessageUtil.js","stores/ThreadStore.js","stores/MessageStore.js","stores/UnreadThreadStore.js","components/ThreadSection.react.js","actions/ChatServerActionCreator.js","utils/ChatWebAPIUtils.js","actions/ChatMessageActionCreator.js","components/MessageComposer.react.js","components/MessageListItem.react.js","components/MessageSection.react.js","components/ChatApp.react.js","ChatExampleData.js","index.js","dispatcher/ChatAppDispatcher.js"],"names":["ActionTypes","keyMirror","CLICK_THREAD","CREATE_MESSAGE","RECEIVE_RAW_CREATED_MESSAGE","RECEIVE_RAW_MESSAGES","ChatConstants","threadID","ChatAppDispatcher","dispatch","type","ThreadListItem","props","_onClick","ChatThreadActionCreators","thread","id","this","lastMessage","className","cx","currentThreadID","onClick","name","date","toLocaleTimeString","text","React","Component","rawMessage","authorName","Date","timestamp","isRead","now","threadStoreInstance","currentID","threads","dispatchToken","addChangeListener","callback","on","removeChangeListener","removeListener","rawMessages","forEach","message","lastTimestamp","threadName","ChatMessageUtils","allChrono","getAllChrono","length","emit","orderedThreads","push","sort","a","b","get","getCurrentID","Events","EventEmitter","register","action","emitChange","init","messageStoreInstance","messages","getAllForCurrentThread","getAllForThread","ThreadStore","threadMessages","waitFor","markAllInThreadRead","addMessages","unreadThreadStoreInstance","CHANGE_EVENT","getAll","unreadCount","MessageStore","ThreadSection","getStateFromStores","UnreadThreadStore","getCount","_onChange","setState","state","threadListItems","map","key","unread","require","chatServerActionCreatorInstance","createdMessage","JSON","parse","window","localStorage","getItem","ChatServerActionCreators","receiveAll","setItem","stringify","setTimeout","receiveCreatedMessage","ChatWebAPIUtils","MessageComposer","ENTER_KEY_CODE","onChange","event","value","target","onKeyDown","keyCode","preventDefault","trim","ChatMessageActionCreator","MessageListItem","MessageSection","getCurrent","messageListItems","getMessageListItem","ref","scrollToBottom","ul","ReactDOM","findDOMNode","refs","messageList","scrollTop","scrollHeight","ChatApp","clear","ChatExampleData","render","document","getElementById","Dispatcher","module","exports"],"mappings":"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","file":"static/js/main.60951780.chunk.js","sourcesContent":["import keyMirror from 'keymirror';\r\n\r\nexport default {\r\n    ActionTypes: keyMirror({\r\n        CLICK_THREAD: null,\r\n        CREATE_MESSAGE: null,\r\n        RECEIVE_RAW_CREATED_MESSAGE: null,\r\n        RECEIVE_RAW_MESSAGES: null\r\n    })\r\n};\r\n","import ChatAppDispatcher from '../dispatcher/ChatAppDispatcher.js';\r\nimport ChatConstants from '../constants/ChatConstants';\r\n\r\nvar ActionTypes = ChatConstants.ActionTypes;\r\n\r\nexport default {\r\n    clickThread: (threadID) => {\r\n        ChatAppDispatcher.dispatch({\r\n            type: ActionTypes.CLICK_THREAD,\r\n            threadID: threadID\r\n        });\r\n    }\r\n};","import React from 'react';\r\nimport ChatThreadActionCreators from '../actions/ChatThreadActionCreator';\r\n\r\n// A helper to apply css class dynamically\r\nimport cx from 'react-cx';\r\n\r\nclass ThreadListItem extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n        \r\n    render(){\r\n        var thread = this.props.thread;\r\n        var lastMessage = thread.lastMessage;\r\n\r\n        return (\r\n            <li className={cx({\r\n                'thread-list-item': true,\r\n                'active': thread.id == this.props.currentThreadID\r\n            })}\r\n            onClick={this._onClick}>\r\n                <h5 className=\"thread-name\">{thread.name}</h5>\r\n                <div className=\"thread-time\">\r\n                    {lastMessage.date.toLocaleTimeString()}\r\n                </div>\r\n                <div className=\"thread-last-message\">\r\n                    {lastMessage.text}\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    _onClick = ()=>{\r\n        ChatThreadActionCreators.clickThread(this.props.thread.id);\r\n    }\r\n}\r\n\r\nexport default ThreadListItem;\r\n","export default {\r\n    convertRawMessage: function(rawMessage, currentThreadID){\r\n        return {\r\n            id: rawMessage.id,\r\n            threadID: rawMessage.threadID,\r\n            authorName: rawMessage.authorName,\r\n            date: new Date(rawMessage.timestamp),\r\n            text: rawMessage.text,\r\n            isRead: rawMessage.threadID === currentThreadID\r\n        };\r\n    },\r\n\r\n    getCreatedMessageData: function(text, currentThreadID) {\r\n        var timestamp = Date.now();\r\n        return {\r\n            id: 'm_' + timestamp,\r\n            threadID: currentThreadID,\r\n            authorName: 'Bill', // hard coded for the example\r\n            date: new Date(timestamp),\r\n            text: text,\r\n            isRead: true\r\n        };\r\n    }\r\n};","///<reference path=\"../utils/ChatMessageUtil.js\" />\r\n\r\nimport Events from 'events';\r\nimport ChatAppDispatcher from '../dispatcher/ChatAppDispatcher.js';\r\nimport ChatConstants from '../constants/ChatConstants';\r\nimport ChatMessageUtils from '../utils/ChatMessageUtil';\r\n\r\nconst ActionTypes = ChatConstants.ActionTypes;\r\nconst CHANGE_EVENT = 'change';\r\n\r\n\r\n\r\nclass ThreadStore extends Events.EventEmitter {\r\n    currentID = null;\r\n    threads = {};\r\n\r\n    dispatchToken = null;\r\n    \r\n    init(rawMessages) {\r\n        rawMessages.forEach(message => {\r\n            var threadID = message.threadID;\r\n            var thread = this.threads[threadID];\r\n            if(thread && thread.lastTimestamp > message.timestamp) {\r\n                return;\r\n                // Here, is it right to use return?\r\n                // Yes, because it's Array.forEach, it is different from the real \r\n                // for, it cannot be break or return, just call the callback handler \r\n                // for each item\r\n            }\r\n\r\n            this.threads[threadID] = {\r\n                id: threadID,\r\n                name: message.threadName,\r\n                lastTimestamp: message.timestamp,\r\n                lastMessage: ChatMessageUtils.convertRawMessage(message, this.currentID)\r\n            };\r\n        });\r\n\r\n        if(!this.currentID){\r\n            var allChrono = this.getAllChrono();\r\n            this.currentID = allChrono[allChrono.length - 1].id;\r\n        }\r\n\r\n        this.threads[this.currentID].lastMessage.isRead = true;\r\n    }\r\n\r\n    // Tell react view to update DOM/HTML\r\n    emitChange() {\r\n        this.emit(CHANGE_EVENT);\r\n    }\r\n\r\n    /**\r\n     * @param {function} callback\r\n     */\r\n    addChangeListener = (callback) => {\r\n        this.on(CHANGE_EVENT, callback);\r\n    }\r\n\r\n    /**\r\n     * @param {function} callback\r\n     */\r\n    removeChangeListener = (callback) => {\r\n        this.removeListener(CHANGE_EVENT, callback);\r\n    }\r\n\r\n    /**\r\n     * param {string} id\r\n     */\r\n    get(id){\r\n        return this.threads[id];\r\n    }\r\n\r\n    getAll(){\r\n        return this.threads;\r\n    }\r\n\r\n    getAllChrono(){\r\n        var orderedThreads = [];\r\n\r\n        // go through the dictionary keys\r\n        for(var id in this.threads){\r\n            var thread = this.threads[id];\r\n            orderedThreads.push(thread);\r\n        }\r\n        orderedThreads.sort((a, b) => {\r\n            if(a.lastMessage.date < b.lastMessage.date) {\r\n                return -1;\r\n            }\r\n            else if (a.lastMessage.date > b.lastMessage.date) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n\r\n        return orderedThreads;\r\n    }\r\n\r\n    getCurrentID(){\r\n        return this.currentID;\r\n    }\r\n\r\n    getCurrent(){\r\n        return this.get(this.getCurrentID());\r\n    }    \r\n}\r\n\r\nvar threadStoreInstance = new ThreadStore();\r\n\r\nthreadStoreInstance.dispatchToken = ChatAppDispatcher.register((action) => {    \r\n    switch(action.type){\r\n        case ActionTypes.CLICK_THREAD:\r\n            threadStoreInstance.currentID = action.threadID;\r\n            threadStoreInstance.threads[threadStoreInstance.currentID].lastMessage.isRead = true;\r\n            threadStoreInstance.emitChange();\r\n            break;\r\n        case ActionTypes.RECEIVE_RAW_MESSAGES:\r\n            threadStoreInstance.init(action.rawMessages);\r\n            threadStoreInstance.emitChange();\r\n            break;\r\n\r\n        default:\r\n            // do nothing                    \r\n    }\r\n});\r\n\r\nexport default threadStoreInstance;\r\n","\r\n///<reference path=\"../utils/ChatMessageUtil.js\" />\r\n///<reference path=\"ThreadStore.js\" />\r\n\r\nimport Events from 'events';\r\nimport ThreadStore from '../stores/ThreadStore';\r\nimport ChatAppDispatcher from '../dispatcher/ChatAppDispatcher.js';\r\nimport ChatConstants from '../constants/ChatConstants';\r\nimport ChatMessageUtils from '../utils/ChatMessageUtil';\r\n\r\nconst ActionTypes = ChatConstants.ActionTypes;\r\nconst CHANGE_EVENT = 'change';        \r\n\r\nclass MessageStore extends Events.EventEmitter {\r\n    messages = {};\r\n    dispatchToken = null;\r\n\r\n    addMessages(rawMessages) {\r\n        rawMessages.forEach(message => {\r\n            if(!this.messages[message.id]) {\r\n                this.messages[message.id] = ChatMessageUtils.convertRawMessage(\r\n                    message,\r\n                    ThreadStore.getCurrentID()\r\n                );\r\n            }\r\n        });\r\n    }\r\n    \r\n    markAllInThreadRead(threadID) {\r\n        for(var id in this.messages) {\r\n            if(this.messages[id].threadID == threadID) {\r\n                this.messages[id].isRead = true;\r\n            }\r\n        } \r\n    }\r\n    // Tell react view to update DOM/HTML\r\n    emitChange(){\r\n        this.emit(CHANGE_EVENT);\r\n    }\r\n\r\n    addChangeListener(callback){\r\n        this.on(CHANGE_EVENT, callback);\r\n    }\r\n\r\n    removeChangeListener (callback){\r\n        this.removeListener(CHANGE_EVENT, callback);\r\n    }\r\n\r\n    get(id) {\r\n        return this.messages[id];\r\n    }\r\n\r\n    getAll(){\r\n        return this.messages;\r\n    }\r\n\r\n    getAllForThread(threadID) {\r\n        var threadMessages = [];\r\n        for (var id in this.messages) {\r\n            if(this.messages[id].threadID === threadID) {\r\n                threadMessages.push(this.messages[id]);\r\n            }\r\n        }\r\n\r\n        threadMessages.sort((a,b) => {\r\n            if(a.date < b.date) {\r\n                return -1;\r\n            }\r\n            else if (a.date > b.date) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n\r\n        return threadMessages;\r\n    }\r\n\r\n    getAllForCurrentThread = () => {\r\n        return this.getAllForThread(ThreadStore.getCurrentID());\r\n    }\r\n}\r\n\r\nvar messageStoreInstance = new MessageStore();\r\n\r\nmessageStoreInstance.dispatchToken = ChatAppDispatcher.register((action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.CLICK_THREAD:\r\n            ChatAppDispatcher.waitFor([ThreadStore.dispatchToken]);\r\n            messageStoreInstance.markAllInThreadRead(ThreadStore.getCurrentID());\r\n            messageStoreInstance.emitChange();\r\n            break;\r\n        case ActionTypes.CREATE_MESSAGE:\r\n            var message = ChatMessageUtils.getCreatedMessageData(\r\n                action.text,\r\n                action.currentThreadID\r\n            );\r\n\r\n            messageStoreInstance.messages[message.id] = message;\r\n            messageStoreInstance.emitChange();\r\n            break;\r\n        case ActionTypes.RECEIVE_RAW_MESSAGES:\r\n            messageStoreInstance.addMessages(action.rawMessages);\r\n            ChatAppDispatcher.waitFor([ThreadStore.dispatchToken]);\r\n            messageStoreInstance.markAllInThreadRead(ThreadStore.getCurrentID());\r\n            messageStoreInstance.emitChange();\r\n            break;\r\n        default:\r\n            // do nothing \r\n    }\r\n});\r\n\r\nexport default messageStoreInstance;","import Events from 'events';\r\nimport ChatAppDispatcher from '../dispatcher/ChatAppDispatcher';\r\nimport ChatConstants from '../constants/ChatConstants';\r\nimport MessageStore from '../stores/MessageStore';\r\nimport ThreadStore from '../stores/ThreadStore';\r\n\r\nclass UnreadThreadStore extends Events.EventEmitter {\r\n    ActionTypes = ChatConstants.ActionTypes;\r\n    CHANGE_EVENT = 'change';\r\n    dispatchToken = null;\r\n\r\n    // Tell react view to update DOM/HTML\r\n    emitChange(){\r\n        this.emit(this.CHANGE_EVENT);\r\n    }\r\n\r\n    addChangeListener(callback) {\r\n        this.on(this.CHANGE_EVENT, callback);\r\n    }\r\n\r\n    removeChangeListener(callback) {\r\n        this.removeListener(this.CHANGE_EVENT, callback);\r\n    }\r\n\r\n    getCount() {\r\n        var threads = ThreadStore.getAll();\r\n        var unreadCount = 0;\r\n        for(var id in threads) {\r\n            if(!threads[id].lastMessage.isRead) {\r\n                unreadCount++;\r\n            }\r\n        }\r\n\r\n        return unreadCount;\r\n    }\r\n}\r\n\r\nvar unreadThreadStoreInstance = new UnreadThreadStore();\r\n\r\nunreadThreadStoreInstance.dispatchToken = ChatAppDispatcher.dispatch((action) => {\r\n    ChatAppDispatcher.waitFor([\r\n        ThreadStore.dispatchToken,\r\n        MessageStore.dispatchToken\r\n    ]);\r\n\r\n    switch(action.type) {\r\n        case unreadThreadStoreInstance.ActionTypes.CLICK_THREAD:\r\n            unreadThreadStoreInstance.emitChange();\r\n            break;\r\n\r\n        case unreadThreadStoreInstance.ActionTypes.RECEIVE_RAW_MESSAGES:\r\n            unreadThreadStoreInstance.emitChange();\r\n            break;\r\n\r\n        default:\r\n            // do nothing\r\n    }\r\n});\r\n\r\nexport default unreadThreadStoreInstance;","import React from 'react';\r\nimport ThreadListItem from '../components/ThreadListItem.react';\r\nimport ThreadStore from '../stores/ThreadStore';\r\nimport UnreadThreadStore from '../stores/UnreadThreadStore';\r\n\r\nclass ThreadSection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);        \r\n        this.state = this.getStateFromStores();\r\n    }\r\n\r\n    getStateFromStores = () => {\r\n        return {\r\n            threads: ThreadStore.getAllChrono(),\r\n            currentThreadID: ThreadStore.getCurrentID(),\r\n            unreadCount: UnreadThreadStore.getCount()\r\n        };\r\n    }    \r\n\r\n    _onChange  = () => {\r\n        this.setState(this.getStateFromStores());\r\n    }\r\n\r\n    componentDidMount(){\r\n        ThreadStore.addChangeListener(this._onChange);\r\n        UnreadThreadStore.addChangeListener(this._onChange);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        ThreadStore.removeChangeListener(this._onChange);\r\n        UnreadThreadStore.removeChangeListener(this._onChange);\r\n    }\r\n\r\n    render() {\r\n        var threadListItems = this.state.threads.map((thread) => {\r\n            return (\r\n                // Here use the thread id as the list item key\r\n                <ThreadListItem\r\n                    key={thread.id}\r\n                    thread={thread}\r\n                    currentThreadID={this.state.currentThreadID}\r\n                ></ThreadListItem>\r\n            );\r\n        }, this);\r\n\r\n        var unread = this.state.unreadCount == 0 ? null : <span>Unread threads: {this.state.unreadCount}</span>;\r\n\r\n        return (\r\n            <div className=\"thread-section\">\r\n                <div className=\"thread-count\">\r\n                    {unread}\r\n                </div>\r\n                <ul className=\"thread-list\">\r\n                    {threadListItems}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThreadSection;","import ChatConstants from '../constants/ChatConstants';\r\nvar ChatAppDispatcher = require('../dispatcher/ChatAppDispatcher.js');\r\nvar ActionTypes = ChatConstants.ActionTypes;\r\n\r\nclass ChatServerActionCreator {\r\n        receiveAll(rawMessages) {\r\n        ChatAppDispatcher.dispatch({\r\n            type: ActionTypes.RECEIVE_RAW_MESSAGES,\r\n            rawMessages: rawMessages\r\n        });\r\n    }\r\n\r\n    receiveCreatedMessage(createdMessage) {\r\n        ChatAppDispatcher.dispatch({\r\n            type: ActionTypes.RECEIVE_RAW_CREATED_MESSAGE,\r\n            rawMessage: createdMessage\r\n        });\r\n    }\r\n}\r\n\r\nvar chatServerActionCreatorInstance = new ChatServerActionCreator();\r\n\r\nexport default chatServerActionCreatorInstance;","import ChatServerActionCreators from '../actions/ChatServerActionCreator';\r\n\r\nexport default {\r\n    getAllMessages: function(){\r\n        // simulate retreeving data from a database\r\n        var rawMessages = JSON.parse(window.localStorage.getItem('messages'));\r\n\r\n        // simulate success callback\r\n        ChatServerActionCreators.receiveAll(rawMessages);\r\n    },\r\n\r\n    createMessage: function(message, threadName) {\r\n        // simulate writing to a database\r\n        var rawMessages = JSON.parse(localStorage.getItem('messages'));\r\n        var timestamp = Date.now();\r\n        var id = 'm_' + timestamp;\r\n        var threadID = message.threadID || ('t_' + Date.now());\r\n        var createdMessage = {\r\n            id: id,\r\n            threadID: threadID,\r\n            threadName: threadName,\r\n            authorName: message.authorName,\r\n            text: message.text,\r\n            timestamp: timestamp\r\n        };\r\n\r\n        rawMessages.push(createdMessage);\r\n        localStorage.setItem('messages', JSON.stringify(rawMessages));\r\n\r\n        // simulate success callback\r\n        setTimeout(function(){\r\n            ChatServerActionCreators.receiveCreatedMessage(createdMessage);\r\n        }, 0);\r\n    }\r\n};\r\n\r\n","import ChatAppDispatcher from '../dispatcher/ChatAppDispatcher';\r\nimport ChatConstants from '../constants/ChatConstants';\r\nimport ChatWebAPIUtils from '../utils/ChatWebAPIUtils';\r\nimport ChatMessageUtils from '../utils/ChatMessageUtil';\r\n\r\nvar ActionTypes = ChatConstants.ActionTypes;\r\n\r\nexport default {\r\n    createMessage: (text, currentThreadID) => {\r\n        ChatAppDispatcher.dispatch({\r\n            type: ActionTypes.CREATE_MESSAGE,\r\n            text: text,\r\n            currentThreadID: currentThreadID\r\n        });\r\n\r\n        var message = ChatMessageUtils.getCreatedMessageData(text, currentThreadID);\r\n        ChatWebAPIUtils.createMessage(message);\r\n    }\r\n};","import ChatMessageActionCreator from '../actions/ChatMessageActionCreator';\r\nimport React from 'react';\r\n\r\nclass MessageComposer extends React.Component {\r\n    ENTER_KEY_CODE = 13;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { text: '' };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <textarea\r\n            className=\"message-composer\"\r\n            name=\"message\"\r\n            value={this.state.text}\r\n            onChange={this.onChange}\r\n            onKeyDown={this.onKeyDown}\r\n            ></textarea>\r\n        );\r\n    }\r\n\r\n    onChange = (event, value) => {\r\n        this.setState({text: event.target.value});\r\n    };\r\n\r\n    onKeyDown = (event) => {\r\n        if(event.keyCode == this.ENTER_KEY_CODE) {\r\n            event.preventDefault();\r\n            var text = this.state.text.trim();\r\n\r\n            if(text) {\r\n                ChatMessageActionCreator.createMessage(text, this.props.threadID);\r\n            }\r\n\r\n            this.setState({text: ''});\r\n        }\r\n    };\r\n}\r\n\r\nexport default MessageComposer;","import React from 'react';\r\n\r\nclass MessageListItem extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var message = this.props.message;\r\n        return (\r\n            <li className=\"message-list-item\">\r\n                <h5 className=\"message-author-name\">{message.authorName}</h5>\r\n                <div className=\"message-time\">\r\n                    {message.date.toLocaleTimeString()}\r\n                </div>\r\n                <div className=\"message-text\">{message.text}</div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageListItem;","import MessageComposer from './MessageComposer.react';\r\nimport MessageListItem from './MessageListItem.react';\r\nimport MessageStore from '../stores/MessageStore';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ThreadStore from '../stores/ThreadStore';\r\n\r\nclass MessageSection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.getStateFromStores();\r\n    }\r\n\r\n    getStateFromStores() {\r\n        return {\r\n            messages: MessageStore.getAllForCurrentThread(),\r\n            thread: ThreadStore.getCurrent()\r\n        };\r\n    }\r\n\r\n    getMessageListItem(message) {\r\n        return (\r\n            <MessageListItem\r\n            key={message.id}\r\n            message={message}\r\n            ></MessageListItem>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var messageListItems = this.state.messages.map(this.getMessageListItem);\r\n\r\n        // Note the ref attribute in ul, it's related with the scrollToBottom method\r\n        return (\r\n            <div className=\"message-section\">\r\n                <h3 className=\"message-thread-heading\">{this.state.thread.name}</h3>\r\n                <ul className=\"message-list\" ref=\"messageList\">\r\n                    {messageListItems}\r\n                </ul>\r\n                <MessageComposer threadID={this.state.thread.id} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n        MessageStore.addChangeListener(this.onChange);\r\n        ThreadStore.addChangeListener(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        MessageStore.removeChangeListener(this.onChange);\r\n        ThreadStore.removeChangeListener(this.onChange);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom() {\r\n        // https://segmentfault.com/q/1010000007906728?_ea=1488928   findDOMNode\r\n        var ul = ReactDOM.findDOMNode(this.refs.messageList); // TODO, what's this?\r\n        ul.scrollTop = ul.scrollHeight;\r\n    }\r\n\r\n    onChange = () => {\r\n        this.setState(this.getStateFromStores());\r\n    };\r\n}\r\n\r\nexport default MessageSection;","import React from 'react';\r\nimport ThreadSection from './ThreadSection.react.js';\r\nimport MessageSection from './MessageSection.react';\r\n\r\n// Apply css styling stuff through this way\r\nimport '../App.css';\r\n\r\nclass ChatApp extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"chatapp\">\r\n                <ThreadSection />\r\n                <MessageSection />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatApp;\r\n","export default {\r\n    init: function(){\r\n        localStorage.clear();\r\n        localStorage.setItem('messages', JSON.stringify([\r\n            {\r\n                id: 'm_1',\r\n                threadID: 't_1',\r\n                threadName: 'Jing and Bill',\r\n                authorName: 'Bill',\r\n                text: 'Hey Jing, want to give a Flux talk at ForwardJS?',\r\n                timestamp: Date.now() - 99999\r\n              },\r\n              {\r\n                id: 'm_2',\r\n                threadID: 't_1',\r\n                threadName: 'Jing and Bill',\r\n                authorName: 'Bill',\r\n                text: 'Seems like a pretty cool conference.',\r\n                timestamp: Date.now() - 89999\r\n              },\r\n              {\r\n                id: 'm_3',\r\n                threadID: 't_1',\r\n                threadName: 'Jing and Bill',\r\n                authorName: 'Jing',\r\n                text: 'Sounds good.  Will they be serving dessert?',\r\n                timestamp: Date.now() - 79999\r\n              },\r\n              {\r\n                id: 'm_4',\r\n                threadID: 't_2',\r\n                threadName: 'Dave and Bill',\r\n                authorName: 'Bill',\r\n                text: 'Hey Dave, want to get a beer after the conference?',\r\n                timestamp: Date.now() - 69999\r\n              },\r\n              {\r\n                id: 'm_5',\r\n                threadID: 't_2',\r\n                threadName: 'Dave and Bill',\r\n                authorName: 'Dave',\r\n                text: 'Totally!  Meet you at the hotel bar.',\r\n                timestamp: Date.now() - 59999\r\n              },\r\n              {\r\n                id: 'm_6',\r\n                threadID: 't_3',\r\n                threadName: 'Functional Heads',\r\n                authorName: 'Bill',\r\n                text: 'Hey Brian, are you going to be talking about functional stuff?',\r\n                timestamp: Date.now() - 49999\r\n              },\r\n              {\r\n                id: 'm_7',\r\n                threadID: 't_3',\r\n                threadName: 'Bill and Brian',\r\n                authorName: 'Brian',\r\n                text: 'At ForwardJS?  Yeah, of course.  See you there!',\r\n                timestamp: Date.now() - 39999\r\n              }\r\n        ]));\r\n    }\r\n};","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ChatApp from './components/ChatApp.react';\nimport ChatExampleData from './ChatExampleData';\nimport ChatWebAPIUtils from './utils/ChatWebAPIUtils';\n\n\nChatExampleData.init(); // load example data into localStorage\n\nChatWebAPIUtils.getAllMessages(); // create receive all action and dispatch it\n\nReactDOM.render(\n  <ChatApp />,\n  document.getElementById('react')\n);\n","var Dispatcher = require('flux').Dispatcher;\r\n\r\nmodule.exports = new Dispatcher();"],"sourceRoot":""}